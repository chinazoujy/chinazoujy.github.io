---
layout: post
title: "SQL 注入笔记二"
data: 2014-12-25
categories: web SQL
tag: web security
---


渗透测试步骤：

 - 在应用程序中，确定隐藏表单字段，cookie和URL参数明显用于通过客户端传送数据的任何情况。
 - 根据数据出现的位置以及参数名称之类的线索，确定或猜测它在应用程序逻辑中发挥的作用
 - 修改数据在应用程序相关功能中的值。确定应用程序是否处理在参数中提交的任意值，以及这样做是否会导致应用程序易于遭受任何攻击。
 
----------
攻击验证机制
1.密码保密性不强：渗透步骤
    
 - 浏览该WEB 站点，查找任何描述上述规则的内容
 - 如果可以进行自我注册，用不同种类的脆弱密码注册几个账户，了解应用程序采用何种规则。
 - 如果拥有一个账户并且可以更改密码，试着把密码更改为各种脆弱密码。

2.蛮力攻击登录

 - 用控制的某个账户手动提交几个错误的登录尝试，监控接收到的错误消息
 - 如果应用程序在大约10次登录失败后还没有返回任何有关账户锁定的消息，再尝试正确登录。如果登录成功，应用程序可能并未采用任何账户锁定策略
 - 如果账户被锁定，可以尝试重复使用不同的账户。如果应用程序发布任何cookie， 这次可以将每个cookie 仅用于一次登录尝试，并为随后的每次登录尝试获取新cookie
 - 此外如果账户被锁定，应查看与提交无效密码相比，提交有效密码是否会导致应用程序的行为出现任何差异。如果确实如此，则可以继续实施密码猜测攻击，即使账户被锁定
 - 如果没有控制任何账户，尝试枚举一个有效的用户名并使用它提交几次错误登录，监控有关账户锁定的错误消息
 - 发动蛮力攻击前，首先确定应用程序响应成功与失败登录之间的行为差异，以此分清它们在自动攻击过程中表现出的区别。
 - 列出已枚举出的或常见的用户名列表和常用密码列表。根据所获得的任何有关密码强度规则的信息对上述列表加以修改，以避免进行多余测试
 - 使用这些用户名和密码的各种排列组合，通过适当的工具或定制脚本迅速生成登录请求。监控服务器响应以确定成功的登录尝试。
 - 如果一次针对几个用户名，通常最好以广度优先而非深度优先的方式实施这种蛮力攻击。这包括循环使用一组密码并轮流对每个用户名使用每一个密码。这种方法有两方面的好处：首先，可以更加迅速地确定使用常用密码的账户，其次，这样做可以降低触发任何账户锁定防御的可能性，因为在使用同一个账户进行连续登录之间存在时间延迟。

----------

详细的失败信息
渗透测试步骤：

 - 如果已经知道一个有效的用户名（例如一个受控制的账户），使用这个用户名和一个错误的密码进行一次登录，然后使用一个完全随机的用户名进行另一次登录。
 - 记录服务器响应两次登录尝试的每一个细节，包括状态码、任何重定向、屏幕上显示的信息以及任何隐藏在HTML页面中的差异。使用拦截代理服务器保存服务器上来回流量的完整历史记录
 - 努力找出服务器响应两次登录尝试的任何明显或细微的差异
 - 如果无法发现任何差异，在应用程序中任何提交用户名的地方（例如自我注册，密码修改与忘记密码功能）重复上述操作。
 - 如果发现服务器响应有效和无效用户名之间的差异，收集一个常见用户名列表并使用一个定制脚本或自动工具迅速提交每个用户名，筛选出说明用户名有效的响应
 - 开始枚举操作之前，请确定应用程序是否在登录尝试失败次数达到一定数目后执行账户锁定。如果应用程序执行账户锁定，最好在设计枚举攻击时记住这一点。例如，如果应用程序只允许登录某个账户时失败3次，可能就会在使用通过自动枚举发现的每个用户名登录时浪费一次登录机会，因此，当进行枚举攻击时，不要在每次登录时提交完全不合理的密码，而是提交常见的密码。如果应用程序执行脆弱的密码强度规则，在枚举操作过程中执行的一些登录尝试就很可能会取得成功，有些情况下还可能同时查明用户名和密码，要以用户名设置密码字段，可以使用Burp intruder中的“battering ram”攻击模式，在登录请求的几个位置插入下相同的有效载荷。
